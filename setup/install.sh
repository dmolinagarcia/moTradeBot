# Disable Kernel Upgrade notifications
sudo sed -i "s/#\$nrconf{kernelhints} = -1;/\$nrconf{kernelhints} = -1;/g" /etc/needrestart/needrestart.conf

# Get user information
sudo apt --assume-yes update
sudo NEEDRESTART_MODE=a apt-get --assume-yes install whiptail
whiptail --msgbox --title "Please enter your BINGX credentials" "This information won't ever be shared with anyone and will be kept secure withing your own server!" 8 80
vAPIKEY=$(whiptail --passwordbox "Enter your BINGx APIKEY" 8  80 3>&1 1>&2 2>&3)
vSECRETKEY=$(whiptail --passwordbox "Enter your BINGx SECRETKEY" 8  80 3>&1 1>&2 2>&3)
vACCOUNT=$(whiptail --radiolist --title "Use REAL or TEST account?" "Please select your preferred option" 8 80 2 "REAL" "Use your REAL account" OFF  "TEST" "Use your TEST account" ON  3>&1 1>&2 2>&3)
vPUBLICIP=$(whiptail --inputbox "Enter your OCI Public IP" 8  80 3>&1 1>&2 2>&3)
vSITEURL=$(whiptail --inputbox "Enter your DNS subdomain (xxxxxx.mooo.com)" 8  80 3>&1 1>&2 2>&3)
vEMAIL=$(whiptail --inputbox --title "Enter a valid email" "This is used to get a SSL certificate for your site" 12  80 3>&1 1>&2 2>&3)

while true; do
  vDJANGOPASS=$(whiptail --passwordbox "Enter your ADMIN password" 8  80 3>&1 1>&2 2>&3)
  vDJANGOPASS2=$(whiptail --passwordbox "Confirm your ADMIN password" 8  80 3>&1 1>&2 2>&3)
  [ "$vDJANGOPASS" = "$vDJANGOPASS2" ] && break
  whiptail --msgbox "Passwords do not match" 8 80
done

$vDJANGOPASS
# PreCreate moTrade user
sudo mkdir -p /home/moTrade
sudo cp /etc/skel/.* /home/moTrade 2>/dev/null
sudo useradd moTrade -M -s /bin/bash


# Prepare OS
sudo NEEDRESTART_MODE=a apt-get dist-upgrade --yes
sudo NEEDRESTART_MODE=a apt-get --assume-yes install software-properties-common
sudo add-apt-repository --yes universe
sudo NEEDRESTART_MODE=a apt-get --assume-yes install git python3 vim bsdmainutils sqlite3 python3-pip jq nodejs python2 cron 
umask 027
sudo ln -s -f /usr/bin/python3 /usr/bin/python
sudo pip3 install testresources Django json2html flask
## sudo pip3 install git+git://github.com/Lu-Yi-Hsun/iqoptionapi.git
## IQOption no longer supported
echo "Europe/Madrid" | sudo tee /etc/timezone
sudo dpkg-reconfigure --frontend noninteractive tzdata
sudo timedatectl set-timezone "Europe/Madrid"
git clone https://github.com/dmolinagarcia/moTradeBot.git
sudo NEEDRESTART_MODE=a apt-get dist-upgrade --yes

##################################################
##            CONFIGURE SECRETS AND KEYS!
##
##
##
##

## Generate BINGXCFG.py

case $vACCOUNT in
    REAL ) vAPIURL="https://open-api.bingx.com"; break;;
    TEST ) vAPIURL="https://open-api-vst.bingx.com";;
esac

cat > /home/ubuntu/moTradeBot/BINGXCFG.py << EOF
APIURL = "$vAPIURL"
APIKEY = "$vAPIKEY"
SECRETKEY = "$vSECRETKEY"
EOF

## Generate settings.py
vDJANGOSECRET=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 50 ; echo '')

cat > /home/ubuntu/moTradeBot/MoTrade/settings.py << EOF
"""
Django settings for MoTrade project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$vDJANGOSECRET'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1','$vPUBLICIP','$vSITEURL']

# Application definition

INSTALLED_APPS = [
    'MT.apps.MtConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

STATIC_URL = '/static/'
STATICFILES_DIRS = (str(BASE_DIR.joinpath('static')),) # new
STATIC_ROOT =''


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MoTrade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MoTrade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "formatters": {
        "verbose": {
            "format": "[ {asctime} ] [ {levelname:^8s} ] : {filename}:{lineno} :  {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "/var/log/moTrade/moTrade.log",
            "formatter": "verbose",
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    },
}

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'

EOF

##
##
##
##
##################################################

## Rotate the database
mv /home/ubuntu/moTradeBot/db.sqlite3.source /home/ubuntu/moTradeBot/db.sqlite3
sudo chmod 660 /home/ubuntu/moTradeBot/db.sqlite3
sudo mv moTradeBot/* /home/moTrade 2>/dev/null
sudo mv moTradeBot/.* /home/moTrade 2>/dev/null
sudo chown -R moTrade:moTrade /home/moTrade
rm -rf /home/ubuntu/moTradeBot

## Install and configure HTTP Server

sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 80 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 443 -j ACCEPT
sudo netfilter-persistent save
sudo NEEDRESTART_MODE=a apt-get --assume-yes install apache2 libapache2-mod-wsgi-py3
sudo systemctl restart apache2
sudo mkdir /var/log/moTrade
sudo chown www-data:www-data /var/log/moTrade

# vSITEURL containts the site URL
# Setup virtualhost in APACHE

sudo mkdir /var/www/${vSITEURL}
sudo chown -R moTrade:moTrade /var/www/${vSITEURL}
sudo chmod -R 755 /var/www/${vSITEURL}

cat <<EOF | sudo tee /var/www/${vSITEURL}/index.html > /dev/null
<html>
<head>
    <title>Welcome to ${vSITEURL}</title>
</head>
<body>
    <h1>Success!  The ${vSITEURL} virtual host is working!</h1>
</body>
</html>
EOF

cat <<EOF | sudo tee /etc/apache2/sites-available/${vSITEURL}.conf > /dev/null
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName ${vSITEURL}
    DocumentRoot /var/www/${vSITEURL}
    ErrorLog \${APACHE_LOG_DIR}/${vSITEURL}_error.log
    CustomLog \${APACHE_LOG_DIR}/${vSITEURL}_access.log combined
    Alias /static/ /home/moTrade/MT/static
    
    WSGIDaemonProcess www-motrade processes=2 threads=12 python-path=/home/moTrade
    WSGIApplicationGroup %{GLOBAL}
    WSGIProcessGroup www-motrade
    WSGIScriptAlias / /home/moTrade/MoTrade/wsgi.py
    <Directory /home/moTrade/MoTrade >
        Require all granted
    </Directory>
    <Directory /home/moTrade/MT/static >
        Require all granted
    </Directory>
</VirtualHost>
EOF

cat <<EOF | sudo tee /etc/apache2/sites-available/000-default.conf > /dev/null
<VirtualHost *:80>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
        Redirect 404 /
        ErrorDocument 404 "  "
</VirtualHost>
EOF

cat <<EOF | sudo tee /etc/apache2/sites-available/default-ssl.conf > /dev/null
<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin webmaster@localhost
                DocumentRoot /var/www/html
                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined
                Redirect 404 /
                ErrorDocument 404 "  "                
                SSLEngine on
                SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem
                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>
        </VirtualHost>
</IfModule>
# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
EOF

cat <<EOF | sudo tee -a /etc/apache2/apache2.conf > /dev/null
    WSGIRestrictEmbedded On
    WSGILazyInitialization On   
EOF

sudo a2ensite ${vSITEURL}.conf
sudo a2ensite 000-default.conf
sudo a2ensite default-ssl.conf
sudo a2enmod wsgi
sudo usermod www-data -G www-data,moTrade

# Restart apache
sudo systemctl restart apache2

# SSL Certificate

sudo NEEDRESTART_MODE=a apt-get --assume-yes install certbot python3-certbot-apache
sudo grep -v WSGI /etc/apache2/sites-available/${vSITEURL}.conf > /tmp/virtualhost
sudo chown root:root /tmp/virtualhost
sudo mv /tmp/virtualhost /etc/apache2/sites-available/${vSITEURL}.conf
sudo certbot --apache --non-interactive --agree-tos -m dmolina@gmail.com --domains ${vSITEURL}
sudo systemctl status certbot.timer
sudo certbot renew --dry-run

cat <<EOF | sudo tee /etc/apache2/sites-available/${vSITEURL}-le-ssl.conf > /dev/null
<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerAdmin webmaster@localhost
    ServerName motest1.mooo.com
    DocumentRoot /var/www/motest1.mooo.com
    ErrorLog ${APACHE_LOG_DIR}/motest1.mooo.com_error.log
    CustomLog ${APACHE_LOG_DIR}/motest1.mooo.com_access.log combined
    Alias /static/ /home/moTrade/MT/static/

    WSGIDaemonProcess www-motrade processes=2 threads=12 python-path=/home/moTrade
    WSGIApplicationGroup %{GLOBAL}
    WSGIProcessGroup www-motrade
    WSGIScriptAlias / /home/moTrade/MoTrade/wsgi.py
    
    <Directory /home/moTrade/MoTrade >
        Require all granted
    </Directory>
    <Directory /home/moTrade/MT/static >
        Require all granted
    </Directory>

SSLCertificateFile /etc/letsencrypt/live/motest1.mooo.com/fullchain.pem
SSLCertificateKeyFile /etc/letsencrypt/live/motest1.mooo.com/privkey.pem
Include /etc/letsencrypt/options-ssl-apache.conf
</VirtualHost>
</IfModule>
EOF

# Restart apache
sudo touch /var/log/moTrade/moTrade.log
sudo chmod 777 /var/log/moTrade/moTrade.log
sudo systemctl restart apache2

# Deploy BaaS (Bingxapi As A Service)
cat <<EOF | sudo tee /lib/systemd/system/BINGX.service > /dev/null
[Unit]
Description=BINGX API service
After=multi-user.target
Conflicts=getty@tty1.service

[Service]
User=moTrade
Group=moTrade
Type=simple
ExecStart=/usr/bin/python3 /home/moTrade/BINGX.py
StandardInput=tty-force
StandardOutput=append:/home/moTrade/BINGX.log
StandardError=append:/home/moTrade/BINGX.error.log

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable BINGX.service
sudo systemctl start BINGX.service

## Reset django ADMIN password

sudo -u moTrade python /home/moTrade/manage.py shell << EOF

from django.contrib.auth import get_user_model
def reset_password(u, password):
    try:
        user = get_user_model().objects.get(username=u)
    except:
        return "User could not be found"
    user.set_password(password)
    user.save()
    return "Password has been changed successfully"


reset_password('admin','$vDJANGOPASS')
EOF

whiptail --msgbox --title "moTradeBot setup complete" "System will now reboot to apply system patches" 8 80
